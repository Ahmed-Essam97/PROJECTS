
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000006c8  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  0080007c  0080007c  00000778  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001283  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6e  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf8  00000000  00000000  00002775  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00003370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000767  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d55  00000000  00000000  00003eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_6>
  1c:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_9>
  28:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_10>
  2c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>

/*project to take from user minutes and seconds to set timer*/
int main(void)
{	
	PORT_Init();
  92:	0e 94 8d 02 	call	0x51a	; 0x51a <PORT_Init>
	IRQH_SetGloabINT(INT_ENABLE);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 dd 00 	call	0x1ba	; 0x1ba <IRQH_SetGloabINT>
	SPI_Init();
  9c:	0e 94 11 03 	call	0x622	; 0x622 <SPI_Init>
	uint8 BTN1 = 0,BTN2 = 0,BTN3 = 0,BTN4 = 0;
	while (1)
	{
		BTN1 = BTN_GetValue(Button_0);
  a0:	8a e1       	ldi	r24, 0x1A	; 26
  a2:	0e 94 75 00 	call	0xea	; 0xea <BTN_GetValue>
  a6:	08 2f       	mov	r16, r24
		BTN2 = BTN_GetValue(Button_1);
  a8:	8b e1       	ldi	r24, 0x1B	; 27
  aa:	0e 94 75 00 	call	0xea	; 0xea <BTN_GetValue>
  ae:	18 2f       	mov	r17, r24
		BTN3 = BTN_GetValue(Button_2);
  b0:	8c e1       	ldi	r24, 0x1C	; 28
  b2:	0e 94 75 00 	call	0xea	; 0xea <BTN_GetValue>
  b6:	d8 2f       	mov	r29, r24
		BTN4 = BTN_GetValue(Button_3);
  b8:	8d e1       	ldi	r24, 0x1D	; 29
  ba:	0e 94 75 00 	call	0xea	; 0xea <BTN_GetValue>
  be:	c8 2f       	mov	r28, r24

		if ( BTN1 == pressed)
  c0:	01 11       	cpse	r16, r1
  c2:	03 c0       	rjmp	.+6      	; 0xca <main+0x38>
		{
			SPI_TranSiver(10);
  c4:	8a e0       	ldi	r24, 0x0A	; 10
  c6:	0e 94 21 03 	call	0x642	; 0x642 <SPI_TranSiver>
		}
		if ( BTN2 == pressed)
  ca:	11 11       	cpse	r17, r1
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <main+0x42>
		{
			SPI_TranSiver(20);
  ce:	84 e1       	ldi	r24, 0x14	; 20
  d0:	0e 94 21 03 	call	0x642	; 0x642 <SPI_TranSiver>
		}
		if ( BTN3 == pressed)
  d4:	d1 11       	cpse	r29, r1
  d6:	03 c0       	rjmp	.+6      	; 0xde <main+0x4c>
		{
			SPI_TranSiver(30);
  d8:	8e e1       	ldi	r24, 0x1E	; 30
  da:	0e 94 21 03 	call	0x642	; 0x642 <SPI_TranSiver>
		}
		if ( BTN4 == pressed)
  de:	c1 11       	cpse	r28, r1
  e0:	df cf       	rjmp	.-66     	; 0xa0 <main+0xe>
		{
			SPI_TranSiver(40);
  e2:	88 e2       	ldi	r24, 0x28	; 40
  e4:	0e 94 21 03 	call	0x642	; 0x642 <SPI_TranSiver>
  e8:	db cf       	rjmp	.-74     	; 0xa0 <main+0xe>

000000ea <BTN_GetValue>:
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <BTN_GetValue+0x8>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	18 2f       	mov	r17, r24
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	be 01       	movw	r22, r28
 100:	6f 5f       	subi	r22, 0xFF	; 255
 102:	7f 4f       	sbci	r23, 0xFF	; 255
 104:	81 2f       	mov	r24, r17
 106:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_ReadChennel>
 10a:	06 c0       	rjmp	.+12     	; 0x118 <BTN_GetValue+0x2e>
 10c:	be 01       	movw	r22, r28
 10e:	6e 5f       	subi	r22, 0xFE	; 254
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	81 2f       	mov	r24, r17
 114:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_ReadChennel>
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	88 23       	and	r24, r24
 11c:	b9 f3       	breq	.-18     	; 0x10c <BTN_GetValue+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9c e9       	ldi	r25, 0x9C	; 156
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <BTN_GetValue+0x38>
 126:	00 c0       	rjmp	.+0      	; 0x128 <BTN_GetValue+0x3e>
 128:	00 00       	nop
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	08 95       	ret

00000138 <DIO_ReadChennel>:
 138:	98 2f       	mov	r25, r24
 13a:	96 95       	lsr	r25
 13c:	96 95       	lsr	r25
 13e:	96 95       	lsr	r25
 140:	87 70       	andi	r24, 0x07	; 7
 142:	91 30       	cpi	r25, 0x01	; 1
 144:	99 f0       	breq	.+38     	; 0x16c <DIO_ReadChennel+0x34>
 146:	28 f0       	brcs	.+10     	; 0x152 <DIO_ReadChennel+0x1a>
 148:	92 30       	cpi	r25, 0x02	; 2
 14a:	e9 f0       	breq	.+58     	; 0x186 <DIO_ReadChennel+0x4e>
 14c:	93 30       	cpi	r25, 0x03	; 3
 14e:	41 f1       	breq	.+80     	; 0x1a0 <DIO_ReadChennel+0x68>
 150:	08 95       	ret
 152:	29 b3       	in	r18, 0x19	; 25
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	a9 01       	movw	r20, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_ReadChennel+0x26>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_ReadChennel+0x22>
 162:	ca 01       	movw	r24, r20
 164:	81 70       	andi	r24, 0x01	; 1
 166:	fb 01       	movw	r30, r22
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret
 16c:	26 b3       	in	r18, 0x16	; 22
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	a9 01       	movw	r20, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_ReadChennel+0x40>
 174:	55 95       	asr	r21
 176:	47 95       	ror	r20
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_ReadChennel+0x3c>
 17c:	ca 01       	movw	r24, r20
 17e:	81 70       	andi	r24, 0x01	; 1
 180:	fb 01       	movw	r30, r22
 182:	80 83       	st	Z, r24
 184:	08 95       	ret
 186:	23 b3       	in	r18, 0x13	; 19
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	a9 01       	movw	r20, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_ReadChennel+0x5a>
 18e:	55 95       	asr	r21
 190:	47 95       	ror	r20
 192:	8a 95       	dec	r24
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_ReadChennel+0x56>
 196:	ca 01       	movw	r24, r20
 198:	81 70       	andi	r24, 0x01	; 1
 19a:	fb 01       	movw	r30, r22
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret
 1a0:	20 b3       	in	r18, 0x10	; 16
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	a9 01       	movw	r20, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_ReadChennel+0x74>
 1a8:	55 95       	asr	r21
 1aa:	47 95       	ror	r20
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_ReadChennel+0x70>
 1b0:	ca 01       	movw	r24, r20
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	fb 01       	movw	r30, r22
 1b6:	80 83       	st	Z, r24
 1b8:	08 95       	ret

000001ba <IRQH_SetGloabINT>:
* \Return value:   : void  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void IRQH_SetCallBack(uint8 Interrupt_Vector_Index , void(*p)(void))
{
	CallBack_PtrFunc[Interrupt_Vector_Index] = p ; 
 1ba:	88 23       	and	r24, r24
 1bc:	31 f0       	breq	.+12     	; 0x1ca <IRQH_SetGloabINT+0x10>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <IRQH_SetGloabINT+0x16>
 1c2:	8f b7       	in	r24, 0x3f	; 63
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	8f bf       	out	0x3f, r24	; 63
 1c8:	08 95       	ret
 1ca:	8f b7       	in	r24, 0x3f	; 63
 1cc:	8f 77       	andi	r24, 0x7F	; 127
 1ce:	8f bf       	out	0x3f, r24	; 63
 1d0:	08 95       	ret

000001d2 <__vector_1>:
}


ISR(INT0_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	if (CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX] != Null);
	{
		CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX]();
 1f4:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <CallBack_PtrFunc>
 1f8:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <CallBack_PtrFunc+0x1>
 1fc:	09 95       	icall
	}
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_16>:
ISR(ADC_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	uint32 ADC_Digital_Value = ADC_input_16bit_access;
 242:	24 b1       	in	r18, 0x04	; 4
 244:	35 b1       	in	r19, 0x05	; 5
	ADC_Vin_Value= (ADC_Digital_Value *5000)/1023;
 246:	a8 e8       	ldi	r26, 0x88	; 136
 248:	b3 e1       	ldi	r27, 0x13	; 19
 24a:	0e 94 48 03 	call	0x690	; 0x690 <__umulhisi3>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	33 e0       	ldi	r19, 0x03	; 3
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	0e 94 26 03 	call	0x64c	; 0x64c <__udivmodsi4>
 25a:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__data_end>
 25e:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <__data_end+0x1>
 262:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <__data_end+0x2>
 266:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <__data_end+0x3>
	if (CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX]!=Null)
 26a:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <CallBack_PtrFunc+0x1e>
 26e:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <CallBack_PtrFunc+0x1f>
 272:	30 97       	sbiw	r30, 0x00	; 0
 274:	09 f0       	breq	.+2      	; 0x278 <__vector_16+0x58>
	{
		(*CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX])();
 276:	09 95       	icall
	}
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_11>:




ISR(TIMER0_OVF_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	static uint8 INT_CNT_1 = 0;
	INT_CNT_1++;
 2bc:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <INT_CNT_1.1679>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <INT_CNT_1.1679>
	if (INT_CNT_1 == Timer0_Number_OVRflows_g)
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	a0 e0       	ldi	r26, 0x00	; 0
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <Timer0_Number_OVRflows_g>
 2d0:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <Timer0_Number_OVRflows_g+0x1>
 2d4:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <Timer0_Number_OVRflows_g+0x2>
 2d8:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <Timer0_Number_OVRflows_g+0x3>
 2dc:	84 17       	cp	r24, r20
 2de:	95 07       	cpc	r25, r21
 2e0:	a6 07       	cpc	r26, r22
 2e2:	b7 07       	cpc	r27, r23
 2e4:	51 f4       	brne	.+20     	; 0x2fa <__vector_11+0x60>
	{
		CallBack_PtrFunc[Timer_Counter0_Overflow_VECTOR_INDEX]();
 2e6:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <CallBack_PtrFunc+0x14>
 2ea:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <CallBack_PtrFunc+0x15>
 2ee:	09 95       	icall
		INT_CNT_1 = 0;
 2f0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <INT_CNT_1.1679>
		TCNT0 = Timer0_Init_Value_g ;
 2f4:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Timer0_Init_Value_g>
 2f8:	82 bf       	out	0x32, r24	; 50
	}
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	static uint8 INT_CNT_1 = 0;
	INT_CNT_1++;
 33e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <INT_CNT_1.1685>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <INT_CNT_1.1685>
	OCR0 = 255 ;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	8c bf       	out	0x3c, r24	; 60
	if (INT_CNT_1 == Timer0_Number_OVRflows_g)
 34c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <INT_CNT_1.1685>
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	a0 e0       	ldi	r26, 0x00	; 0
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <Timer0_Number_OVRflows_g>
 35a:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <Timer0_Number_OVRflows_g+0x1>
 35e:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <Timer0_Number_OVRflows_g+0x2>
 362:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <Timer0_Number_OVRflows_g+0x3>
 366:	84 17       	cp	r24, r20
 368:	95 07       	cpc	r25, r21
 36a:	a6 07       	cpc	r26, r22
 36c:	b7 07       	cpc	r27, r23
 36e:	51 f4       	brne	.+20     	; 0x384 <__vector_10+0x68>
	{
		CallBack_PtrFunc[Timer_Counter0_Compare_Match_VECTOR_INDEX]();
 370:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <CallBack_PtrFunc+0x12>
 374:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <CallBack_PtrFunc+0x13>
 378:	09 95       	icall
		INT_CNT_1 = 0;
 37a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <INT_CNT_1.1685>
		OCR0 = Timer0_Init_Value_g ;
 37e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Timer0_Init_Value_g>
 382:	8c bf       	out	0x3c, r24	; 60
	}
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
	Timer1_Number_OVRflows_g++;
 3b8:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <Timer1_Number_OVRflows_g>
 3bc:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <Timer1_Number_OVRflows_g+0x1>
 3c0:	a0 91 b6 00 	lds	r26, 0x00B6	; 0x8000b6 <Timer1_Number_OVRflows_g+0x2>
 3c4:	b0 91 b7 00 	lds	r27, 0x00B7	; 0x8000b7 <Timer1_Number_OVRflows_g+0x3>
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	a1 1d       	adc	r26, r1
 3cc:	b1 1d       	adc	r27, r1
 3ce:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <Timer1_Number_OVRflows_g>
 3d2:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <Timer1_Number_OVRflows_g+0x1>
 3d6:	a0 93 b6 00 	sts	0x00B6, r26	; 0x8000b6 <Timer1_Number_OVRflows_g+0x2>
 3da:	b0 93 b7 00 	sts	0x00B7, r27	; 0x8000b7 <Timer1_Number_OVRflows_g+0x3>
// 		INT_CNT_1 = 0;

// 		TCNT1_16bit_access = Timer1_Init_Value_g ;

// 	}
}
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	static uint8 INT_CNT_1 = 0;
	INT_CNT_1++;
 412:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <INT_CNT_1.1696>
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <INT_CNT_1.1696>
	if (INT_CNT_1 == 1)
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	39 f4       	brne	.+14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		(*CallBack_PtrFunc[Timer_Counter1_Compare_Match_A_VECTOR_INDEX])();
 420:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <CallBack_PtrFunc+0xc>
 424:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <CallBack_PtrFunc+0xd>
 428:	09 95       	icall
		INT_CNT_1 = 0;
 42a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <INT_CNT_1.1696>
	}
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	ICU_Cnt++;
 472:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <ICU_Cnt>
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <ICU_Cnt>
	if (ICU_Cnt == 1)
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	c1 f4       	brne	.+48     	; 0x4b0 <__vector_6+0x60>
	{
		Cap_1 = ICR1_16bit_access;
 480:	86 b5       	in	r24, 0x26	; 38
 482:	97 b5       	in	r25, 0x27	; 39
 484:	a0 e0       	ldi	r26, 0x00	; 0
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <Cap_1>
 48c:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <Cap_1+0x1>
 490:	a0 93 89 00 	sts	0x0089, r26	; 0x800089 <Cap_1+0x2>
 494:	b0 93 8a 00 	sts	0x008A, r27	; 0x80008a <Cap_1+0x3>
		Timer1_Number_OVRflows_g = 0;
 498:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <Timer1_Number_OVRflows_g>
 49c:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Timer1_Number_OVRflows_g+0x1>
 4a0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <Timer1_Number_OVRflows_g+0x2>
 4a4:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <Timer1_Number_OVRflows_g+0x3>
		CLR_BIT(TCCR1B,6);
 4a8:	8e b5       	in	r24, 0x2e	; 46
 4aa:	8f 7b       	andi	r24, 0xBF	; 191
 4ac:	8e bd       	out	0x2e, r24	; 46
 4ae:	24 c0       	rjmp	.+72     	; 0x4f8 <__vector_6+0xa8>
	}
	else if (ICU_Cnt == 2)
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	11 f5       	brne	.+68     	; 0x4f8 <__vector_6+0xa8>
	{
		Cap_2 = ICR1_16bit_access + (Timer1_Number_OVRflows_g *65535);
 4b4:	e6 b5       	in	r30, 0x26	; 38
 4b6:	f7 b5       	in	r31, 0x27	; 39
 4b8:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <Timer1_Number_OVRflows_g>
 4bc:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <Timer1_Number_OVRflows_g+0x1>
 4c0:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <Timer1_Number_OVRflows_g+0x2>
 4c4:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <Timer1_Number_OVRflows_g+0x3>
 4c8:	af ef       	ldi	r26, 0xFF	; 255
 4ca:	bf ef       	ldi	r27, 0xFF	; 255
 4cc:	0e 94 57 03 	call	0x6ae	; 0x6ae <__muluhisi3>
 4d0:	dc 01       	movw	r26, r24
 4d2:	cb 01       	movw	r24, r22
 4d4:	8e 0f       	add	r24, r30
 4d6:	9f 1f       	adc	r25, r31
 4d8:	a1 1d       	adc	r26, r1
 4da:	b1 1d       	adc	r27, r1
 4dc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <Cap_2>
 4e0:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <Cap_2+0x1>
 4e4:	a0 93 85 00 	sts	0x0085, r26	; 0x800085 <Cap_2+0x2>
 4e8:	b0 93 86 00 	sts	0x0086, r27	; 0x800086 <Cap_2+0x3>
		SET_BIT(TCCR1B,6);
 4ec:	8e b5       	in	r24, 0x2e	; 46
 4ee:	80 64       	ori	r24, 0x40	; 64
 4f0:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TIMSK,5);
 4f2:	89 b7       	in	r24, 0x39	; 57
 4f4:	8f 7d       	andi	r24, 0xDF	; 223
 4f6:	89 bf       	out	0x39, r24	; 57
	}
	 
}
 4f8:	ff 91       	pop	r31
 4fa:	ef 91       	pop	r30
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	7f 91       	pop	r23
 506:	6f 91       	pop	r22
 508:	5f 91       	pop	r21
 50a:	4f 91       	pop	r20
 50c:	3f 91       	pop	r19
 50e:	2f 91       	pop	r18
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <PORT_Init>:
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	7e c0       	rjmp	.+252    	; 0x61a <PORT_Init+0x100>
	{
		Port = PORT_Initialization[Cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
 51e:	e9 2f       	mov	r30, r25
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	e0 5a       	subi	r30, 0xA0	; 160
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	80 81       	ld	r24, Z
 52c:	28 2f       	mov	r18, r24
 52e:	26 95       	lsr	r18
 530:	26 95       	lsr	r18
 532:	26 95       	lsr	r18
		Pin = PORT_Initialization[Cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS  ;
 534:	87 70       	andi	r24, 0x07	; 7
		Dir = PORT_Initialization[Cnt].PIN_DIR ;
 536:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(Dir)
 538:	33 23       	and	r19, r19
 53a:	b9 f1       	breq	.+110    	; 0x5aa <PORT_Init+0x90>
 53c:	31 30       	cpi	r19, 0x01	; 1
 53e:	09 f0       	breq	.+2      	; 0x542 <PORT_Init+0x28>
 540:	6b c0       	rjmp	.+214    	; 0x618 <PORT_Init+0xfe>
		{
			case PIN_OUTPUT :
			
			switch(Port)
 542:	21 30       	cpi	r18, 0x01	; 1
 544:	89 f0       	breq	.+34     	; 0x568 <PORT_Init+0x4e>
 546:	28 f0       	brcs	.+10     	; 0x552 <PORT_Init+0x38>
 548:	22 30       	cpi	r18, 0x02	; 2
 54a:	c9 f0       	breq	.+50     	; 0x57e <PORT_Init+0x64>
 54c:	23 30       	cpi	r18, 0x03	; 3
 54e:	11 f1       	breq	.+68     	; 0x594 <PORT_Init+0x7a>
 550:	63 c0       	rjmp	.+198    	; 0x618 <PORT_Init+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 552:	4a b3       	in	r20, 0x1a	; 26
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <PORT_Init+0x44>
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	8a 95       	dec	r24
 560:	e2 f7       	brpl	.-8      	; 0x55a <PORT_Init+0x40>
 562:	24 2b       	or	r18, r20
 564:	2a bb       	out	0x1a, r18	; 26

				break;
 566:	58 c0       	rjmp	.+176    	; 0x618 <PORT_Init+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 568:	47 b3       	in	r20, 0x17	; 23
 56a:	21 e0       	ldi	r18, 0x01	; 1
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <PORT_Init+0x5a>
 570:	22 0f       	add	r18, r18
 572:	33 1f       	adc	r19, r19
 574:	8a 95       	dec	r24
 576:	e2 f7       	brpl	.-8      	; 0x570 <PORT_Init+0x56>
 578:	24 2b       	or	r18, r20
 57a:	27 bb       	out	0x17, r18	; 23
				
				break;
 57c:	4d c0       	rjmp	.+154    	; 0x618 <PORT_Init+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 57e:	44 b3       	in	r20, 0x14	; 20
 580:	21 e0       	ldi	r18, 0x01	; 1
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <PORT_Init+0x70>
 586:	22 0f       	add	r18, r18
 588:	33 1f       	adc	r19, r19
 58a:	8a 95       	dec	r24
 58c:	e2 f7       	brpl	.-8      	; 0x586 <PORT_Init+0x6c>
 58e:	24 2b       	or	r18, r20
 590:	24 bb       	out	0x14, r18	; 20
				
				break;
 592:	42 c0       	rjmp	.+132    	; 0x618 <PORT_Init+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 594:	41 b3       	in	r20, 0x11	; 17
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <PORT_Init+0x86>
 59c:	22 0f       	add	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	8a 95       	dec	r24
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <PORT_Init+0x82>
 5a4:	24 2b       	or	r18, r20
 5a6:	21 bb       	out	0x11, r18	; 17
				
				break;
 5a8:	37 c0       	rjmp	.+110    	; 0x618 <PORT_Init+0xfe>
				break;
			}
			break;
			
			case PIN_INPUT :
			switch(Port)
 5aa:	21 30       	cpi	r18, 0x01	; 1
 5ac:	91 f0       	breq	.+36     	; 0x5d2 <PORT_Init+0xb8>
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <PORT_Init+0xa0>
 5b0:	22 30       	cpi	r18, 0x02	; 2
 5b2:	d9 f0       	breq	.+54     	; 0x5ea <PORT_Init+0xd0>
 5b4:	23 30       	cpi	r18, 0x03	; 3
 5b6:	29 f1       	breq	.+74     	; 0x602 <PORT_Init+0xe8>
 5b8:	2f c0       	rjmp	.+94     	; 0x618 <PORT_Init+0xfe>
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 5ba:	4a b3       	in	r20, 0x1a	; 26
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <PORT_Init+0xac>
 5c2:	22 0f       	add	r18, r18
 5c4:	33 1f       	adc	r19, r19
 5c6:	8a 95       	dec	r24
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <PORT_Init+0xa8>
 5ca:	20 95       	com	r18
 5cc:	24 23       	and	r18, r20
 5ce:	2a bb       	out	0x1a, r18	; 26

				break;
 5d0:	23 c0       	rjmp	.+70     	; 0x618 <PORT_Init+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 5d2:	47 b3       	in	r20, 0x17	; 23
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <PORT_Init+0xc4>
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
 5de:	8a 95       	dec	r24
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <PORT_Init+0xc0>
 5e2:	20 95       	com	r18
 5e4:	24 23       	and	r18, r20
 5e6:	27 bb       	out	0x17, r18	; 23
				
				break;
 5e8:	17 c0       	rjmp	.+46     	; 0x618 <PORT_Init+0xfe>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 5ea:	44 b3       	in	r20, 0x14	; 20
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <PORT_Init+0xdc>
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	8a 95       	dec	r24
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <PORT_Init+0xd8>
 5fa:	20 95       	com	r18
 5fc:	24 23       	and	r18, r20
 5fe:	24 bb       	out	0x14, r18	; 20
				
				break;
 600:	0b c0       	rjmp	.+22     	; 0x618 <PORT_Init+0xfe>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
 602:	41 b3       	in	r20, 0x11	; 17
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <PORT_Init+0xf4>
 60a:	22 0f       	add	r18, r18
 60c:	33 1f       	adc	r19, r19
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <PORT_Init+0xf0>
 612:	20 95       	com	r18
 614:	24 23       	and	r18, r20
 616:	21 bb       	out	0x11, r18	; 17
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	9e 30       	cpi	r25, 0x0E	; 14
 61c:	08 f4       	brcc	.+2      	; 0x620 <PORT_Init+0x106>
 61e:	7f cf       	rjmp	.-258    	; 0x51e <PORT_Init+0x4>
			
			default:
			break;
		}
	}
}
 620:	08 95       	ret

00000622 <SPI_Init>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void SPI_Init(void)
{
	#if   (SPI_MODE == SPI_MASTER)
	SPI->SPCR |=0x50;
 622:	8d b1       	in	r24, 0x0d	; 13
 624:	80 65       	ori	r24, 0x50	; 80
 626:	8d b9       	out	0x0d, r24	; 13
	#elif (SPI_CLK_RATE == SPI_CLK_128)
	#endif /*if (SPI_CLK_RATE==SPI_CLK_128)*/

	
	#if   (SPI_CLK_SAMPLE == LEADING_EDGE)
	CLR_BIT(SPI->SPCR , 2);
 628:	8d b1       	in	r24, 0x0d	; 13
 62a:	8b 7f       	andi	r24, 0xFB	; 251
 62c:	8d b9       	out	0x0d, r24	; 13
	#elif (SPI_CLK_SAMPLE == TRAILING_EDGE)
	SET_BIT(SPI->SPCR , 2);
	#endif /*if (SPI_CLK_SAMPLE==LEADING_EDGE)*/
	
	#if   (SPI_CLK_POLARITY_RISING == LEADING_EDGE)
	CLR_BIT(SPI->SPCR , 3);
 62e:	8d b1       	in	r24, 0x0d	; 13
 630:	87 7f       	andi	r24, 0xF7	; 247
 632:	8d b9       	out	0x0d, r24	; 13
	#elif (SPI_CLK_POLARITY_RISING == TRAILING_EDGE)
	SET_BIT(SPI->SPCR , 3);
	#endif /*if (SPI_CLK_POLARITY_RISING==LEADING_EDGE)*/
	
	#if   (SPI_DATA_ORDER == ORDER_MSB)
	CLR_BIT(SPI->SPCR , 5);
 634:	8d b1       	in	r24, 0x0d	; 13
 636:	8f 7d       	andi	r24, 0xDF	; 223
 638:	8d b9       	out	0x0d, r24	; 13
	#endif /*if(SPI_MODE == SPI_MASTER)*/
	
	#if   (SPI_INT_STATUS == SPI_INT_ENABLE)
	SET_BIT(SPI->SPCR , 7);
	#elif (SPI_INT_STATUS == SPI_INT_DISABLE)
	CLR_BIT(SPI->SPCR , 7);
 63a:	8d b1       	in	r24, 0x0d	; 13
 63c:	8f 77       	andi	r24, 0x7F	; 127
 63e:	8d b9       	out	0x0d, r24	; 13
 640:	08 95       	ret

00000642 <SPI_TranSiver>:
*******************************************************************************/

uint8 SPI_TranSiver(uint8 Trans_Data)
{
	uint8 Rec_Data = 0;
	SPI->SPDR = Trans_Data;
 642:	8f b9       	out	0x0f, r24	; 15
	
	while (!GET_BIT(SPI->SPSR , 7));
 644:	77 9b       	sbis	0x0e, 7	; 14
 646:	fe cf       	rjmp	.-4      	; 0x644 <SPI_TranSiver+0x2>
	
	Rec_Data = SPI->SPDR;
 648:	8f b1       	in	r24, 0x0f	; 15
	return Rec_Data;
}
 64a:	08 95       	ret

0000064c <__udivmodsi4>:
 64c:	a1 e2       	ldi	r26, 0x21	; 33
 64e:	1a 2e       	mov	r1, r26
 650:	aa 1b       	sub	r26, r26
 652:	bb 1b       	sub	r27, r27
 654:	fd 01       	movw	r30, r26
 656:	0d c0       	rjmp	.+26     	; 0x672 <__udivmodsi4_ep>

00000658 <__udivmodsi4_loop>:
 658:	aa 1f       	adc	r26, r26
 65a:	bb 1f       	adc	r27, r27
 65c:	ee 1f       	adc	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	a2 17       	cp	r26, r18
 662:	b3 07       	cpc	r27, r19
 664:	e4 07       	cpc	r30, r20
 666:	f5 07       	cpc	r31, r21
 668:	20 f0       	brcs	.+8      	; 0x672 <__udivmodsi4_ep>
 66a:	a2 1b       	sub	r26, r18
 66c:	b3 0b       	sbc	r27, r19
 66e:	e4 0b       	sbc	r30, r20
 670:	f5 0b       	sbc	r31, r21

00000672 <__udivmodsi4_ep>:
 672:	66 1f       	adc	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	1a 94       	dec	r1
 67c:	69 f7       	brne	.-38     	; 0x658 <__udivmodsi4_loop>
 67e:	60 95       	com	r22
 680:	70 95       	com	r23
 682:	80 95       	com	r24
 684:	90 95       	com	r25
 686:	9b 01       	movw	r18, r22
 688:	ac 01       	movw	r20, r24
 68a:	bd 01       	movw	r22, r26
 68c:	cf 01       	movw	r24, r30
 68e:	08 95       	ret

00000690 <__umulhisi3>:
 690:	a2 9f       	mul	r26, r18
 692:	b0 01       	movw	r22, r0
 694:	b3 9f       	mul	r27, r19
 696:	c0 01       	movw	r24, r0
 698:	a3 9f       	mul	r26, r19
 69a:	70 0d       	add	r23, r0
 69c:	81 1d       	adc	r24, r1
 69e:	11 24       	eor	r1, r1
 6a0:	91 1d       	adc	r25, r1
 6a2:	b2 9f       	mul	r27, r18
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	08 95       	ret

000006ae <__muluhisi3>:
 6ae:	0e 94 48 03 	call	0x690	; 0x690 <__umulhisi3>
 6b2:	a5 9f       	mul	r26, r21
 6b4:	90 0d       	add	r25, r0
 6b6:	b4 9f       	mul	r27, r20
 6b8:	90 0d       	add	r25, r0
 6ba:	a4 9f       	mul	r26, r20
 6bc:	80 0d       	add	r24, r0
 6be:	91 1d       	adc	r25, r1
 6c0:	11 24       	eor	r1, r1
 6c2:	08 95       	ret

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
